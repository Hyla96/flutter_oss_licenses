import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:args/args.dart';
import 'package:dart_pubspec_licenses/dart_pubspec_licenses.dart' as oss;
import 'package:path/path.dart' as path;

main(List<String> args) async {
  final parser = getArgParser();
  final pubCacheDirPath = oss.guessPubCacheDir();
  final results = parser.parse(args);

  try {
    if (results['help']) {
      printUsage(parser);
      return 0;
    } else if (oss.flutterDir == null) {
      print('FLUTTER_ROOT is not set.');
      return 1;
    } else if (pubCacheDirPath == null) {
      print('Could not determine PUB_CACHE directory.');
      return 2;
    } else if (results.rest.length > 0) {
      print('WARNING: extra parameter given\n');
      printUsage(parser);
      return 3;
    }

    final projectRoot = results['project-root'] ?? await findProjectRoot();
    final outputFilePath =
        results['output'] ?? path.join(projectRoot, 'lib', 'oss_licenses.dart');
    final generateJson = results['json'] ||
        path.extension(outputFilePath).toLowerCase() == '.json';
    final licenses = await oss.generateLicenseInfo(
      pubspecLockPath: path.join(projectRoot, 'pubspec.lock'),
    );

    final String output;
    if (generateJson) {
      output = const JsonEncoder.withIndent("  ").convert(licenses);
    } else {
      final licensesCode = licenses.map((license) => '''
  Package(
    name: '${license.name}',
    description: \'\'\'${license.description}\'\'\',
    ${license.homepage == null ? '' : 'homepage: "${license.homepage}",'}
    ${license.repository == null ? '' : 'repository: "${license.repository}",'}
    authors: ${license.authors?.map((e) => '\'$e\'').toList(growable: false)},
    version: '${license.version}',
    license: \'\'\'${license.license}\'\'\',
    isMarkdown: ${license.isMarkdown},
    isSdk: ${license.isSdk},
    isDirectDependency: ${license.isDirectDependency},
  )
    ''').toList(growable: false);

      output = '''
// cSpell:disable
// ignore_for_file: prefer_single_quotes

import 'package:dart_pubspec_licenses/dart_pubspec_licenses.dart';

/// This code was generated by flutter_oss_licenses
/// https://pub.dev/packages/flutter_oss_licenses
const ossLicenses = <Package>
$licensesCode;
''';
    }

    await File(outputFilePath).writeAsString(output);
    return 0;
  } catch (e, s) {
    print('$e: $s');
    return 4;
  }
}

Future<String> findProjectRoot({Directory? from}) async {
  from = from ?? Directory.current;
  if (await File(path.join(from.path, 'pubspec.yaml')).exists()) {
    return from.path;
  }
  return findProjectRoot(from: from.parent);
}

ArgParser getArgParser() {
  final parser = ArgParser();

  parser.addOption('output', abbr: 'o', defaultsTo: null, help: '''
Specify output file path. If the file extension is .json, --json option is implied anyway.
The default output file path depends on the --json flag:
  with    --json: PROJECT_ROOT/assets/oss_licenses.json
  without --json: PROJECT_ROOT/lib/oss_licenses.dart
''');
  parser.addOption('project-root',
      abbr: '-p',
      defaultsTo: null,
      help:
          'Explicitly specify project root directory that contains pubspec.lock.');
  parser.addFlag('json',
      abbr: 'j',
      defaultsTo: false,
      negatable: false,
      help: 'Generate JSON file rather than dart file.');
  parser.addFlag('help',
      abbr: 'h', defaultsTo: false, negatable: false, help: 'Show the help.');

  return parser;
}

void printUsage(ArgParser parser) {
  print('Usage: ${path.basename(Platform.script.toString())} [OPTION]\n');
  print(parser.usage);
}
